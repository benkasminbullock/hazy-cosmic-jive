#ifdef TEST
#include <stdio.h>
#endif /* def TEST */
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include "split-double.h"
#include "math.h"

typedef struct bcd {
    int16_t pow2;
    int16_t exp;
    uint32_t upper;
    uint32_t lower;
}
bcd_t;

bcd_t bcddata[0x800] = {
{0, 0, 0, 0}, /* -inf */
[% FOR data IN bcddata -%]
{[% data.pow2 %], [% data.exp %], [% data.upper %], [% data.lower %]},
[% END -%]
{0, 0, 0, 0} /* +inf */
};

#define BYTE(bcd,j) (((bcd) >> ((7-j)*4)) & 0xf)

int bit(unsigned char * z, int b)
{
    int byte = b / 8;
    int bit = b % 8;
    if (z[byte] & 1<<bit) {
	return 1;
    }
    return 0;
}

int
print_double (double d, char * buffer)
{
    split_double_t * sp;
    unsigned char * z;
    int bytes[16] = {0};
    int powten;
    int i;
    int exp;
    double check = 0.0;
    int j;
    // Current print point within buffer.
    char * p;
    // Number of bytes printed.
    int printed;

    p = buffer;
    printed = 0;

    sp = (split_double_t *) & d;
    z = (unsigned char *) & d;
    exp = sp->exp;
    powten = bcddata[sp->exp].exp;
//    printf ("exp = %d, pow ten = %d\n", sp->exp, powten);
#if 0
    printf ("data = %08X;%08X x 10^{%d}\n", bcddata[sp->exp].upper,
	    bcddata[sp->exp].lower, bcddata[sp->exp].exp);
#endif
    for (j = 0; j < 8; j++) {
	bytes[j] = BYTE(bcddata[sp->exp].upper, j);
	bytes[j + 8] = BYTE(bcddata[sp->exp].lower, j);
    }
    check = pow (2.0, exp - 1023);
//    printf ("check = %g\n", check);
//    exit (0);
    //printf ("%llX\n", sp->fraction);
    for (i = 1; i <= 52; i++) {
	bcd_t shift;
	int powtenshift;
	int expi;
	expi = exp - i;
	if (expi < 0) {
	    break;
	}
	if (bit (z, 52 - i)) {
	    int j;
	    int maxupper;
	    int maxlower;
#if 0
	    printf ("data = %08X;%08X x 10^{%d}\n", bcddata[expi].upper,
		    bcddata[expi].lower, bcddata[expi].exp);
#endif
	    check += pow (2.0, expi - 1023);
	    shift = bcddata[expi];
	    powtenshift = powten - shift.exp;
#if 0
	    printf ("bit = %d exp = %d powtenshift = %d check=%.9g\n", i, exp - i, powtenshift, check);
#endif 
	    maxupper = 8;
	    maxlower = 8;
	    if (powtenshift > 8) {
		maxupper = 16 - powtenshift;
		maxlower = 0;
	    }
	    else {
		maxupper = 8;
		maxlower = 8 - powtenshift;
	    }
	    for (j = 0; j < maxupper; j++) {
		int digit = (shift.upper >> ((7-j)*4)) & 0xf;
#if 0
		if (digit) {
		    printf ("Adding digit %d\n", digit);
		}
#endif
		bytes[powtenshift + j] += digit;
	    }
	    for (j = 0; j < maxlower; j++) {
		int digit = (shift.lower >> ((7-j)*4)) & 0xf;
#if 0
		if (digit) {
		    printf ("Adding digit %d\n", digit);
		}
#endif
		bytes[powtenshift + 8 + j] += digit;
	    }
	    int k;
#if 0
	    for (k = 0; k < 15; k++) {
		printf ("%d ", bytes[k]);
	    }
	    printf ("\n");
#endif /* 0 */
	}
    }
    for (i = 15; i >= 0; i--) {
	if (bytes[i] > 10) {
	    bytes[i - 1] += bytes[i] / 10;
	    bytes[i] %= 10;
	}
    }
#define MAXDIGITS 14
    // Round off, maximum byte is byte 14.
    if (bytes[MAXDIGITS] >= 5) {
	bytes[MAXDIGITS-1]++;
    }
    for (i = MAXDIGITS; i >= 0; i--) {
	if (bytes[i] == 10) {
	    bytes[i-1]++;
	    bytes[i] = 0;
	}
    }
    if (printed != 0 || p != buffer) {
	fprintf (stderr,
		 "%s:%d: Unexpectedly not at start of string, printed = %d.\n",
		 __FILE__, __LINE__, printed);
	return -1;
    }
    printed += sprintf (p, "%d.", bytes[0]);
	p = buffer + printed;
    for (i = 1; i < MAXDIGITS; i++) {
#if 0
	if (i > 1 && (i - 1) % 3 == 0) {
	    printf ("_");
	}
#endif /* 0 */
	printed += sprintf (p, "%d", bytes[i]);
	p = buffer + printed;
    }
    printed += sprintf (p, "e");
    p = buffer + printed;
    if (powten >= 0) {
	printed += sprintf (p, "+");
	p = buffer + printed;
    }
    else {
	powten = -powten;
	printed += sprintf (p, "-");
	p = buffer + printed;
    }
    printed += sprintf (p, "%02d", powten);
    p = buffer + printed;
    if (strlen (buffer) != printed) {
	fprintf (stderr, "%s:%d: Unexpected mismatch between buffer length %d"
		 " and value of 'printed' %d", __FILE__, __LINE__, 
		 strlen(buffer), printed);
	return -1;
    }
    return printed;
}

#ifdef TEST

static void ruler ()
{
    int i;
    for (i = 0; i < 7; i++) {
	printf ("0123456789");
    }
    printf ("\n");
}

static void doit (double d)
{
    char buffer[0x100] = {0};
    print_double (d, buffer);
    printf ("%.13e\n%s\n", d, buffer);
//    ruler ();
}

int
main (int argc, char ** argv)
{
    char buffer[0x100] = {0};
    double d;

    d = 1234.5678;
    doit (d);
    d = 9.784536e100;
    doit (d);
    d = 0.008765;
    doit (d);
    d = 1.0;
    doit (d);
    d = 16.0;
    doit (d);
    d = 3.0;
    doit (d);
    d = 3.00003;
    doit (d);
    return 0;
}

#endif /* TEST */

